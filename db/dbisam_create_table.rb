# run rails r create_table.rb <sql file path relative to app>
# this is a sample file generated by DBISAM
#
# CREATE TABLE "arb007s"
# (
#    "Codigo" STRING(20) DESCRIPTION 'Código de Barras',
#    "Articulo" STRING(20) DESCRIPTION 'Artículo',
# --PRIMARY KEY ("Codigo","RecordID") COMPRESS FULL
# );
#
# CREATE TABLE "art031s"
# (
#    "Codigo" STRING(20) DESCRIPTION 'Código',
# ...
# 
# Comments and PRIMARY KEY declarations are ignored
# Other declarations (INDEX, DBISAM extensions ...) must be removed before running
#
# inspired on http://benlieber.blogspot.com.es/2010/02/sql-create-script-to-rails-migration.html

require 'rubygems'
require 'active_support'

class Line < String

  attr_accessor :tokenized_line

  def initalize
    self.tokenized_line = tokenize
  end

  def clean_raw_line
    self.strip.gsub(']','').gsub('[','').gsub('(',' ').gsub(')',' ').gsub(',','').gsub('"','').gsub(';','')
  end

  def tokenize
    clean_raw_line.split(' ').compact
  end

  def is_create_table?
    self.include?('CREATE TABLE')
  end

  def table_name
    tokenize[2]
  end

  def rails_table_name
    table_name.tableize unless table_name.nil?
  end

  def column_name
    tokenize[0]
  end

  def rails_column_name
    column_name.underscore unless column_name.nil?
  end

  def column_type
    tokenize[1] ||= 'string'
  end

  def rails_column_type
    case column_type.downcase
    when 'int'
      'integer'
    when 'smallint'
      'integer'
    when 'varchar'
      'string'
    when 'char'
      'string'
    when 'float'
      'numeric'
    when 'datetime'
      'datetime'
    when 'bit'
      'boolean'
    when 'memo'
      'text'
    else
      column_type.downcase
    end
  end

# :limit      Numeric Type  Column Size Max value
# 1               tinyint           1 byte   127
# 2               smallint          2 bytes  32767
# 3               mediumint         3 byte   8388607
# nil, 4, 11      int(11)           4 byte   2147483647
# 5..8            bigint            8 byte   9223372036854775807
# taken from http://ariejan.net/2009/08/20/once-and-for-all-rails-migrations-integer-limit-option/
# Also, Postgres doesn't support tinyint but Rails migrations handles that automatically and sets it to smallint.

  def limit
    if column_type.downcase == 'smallint'
      limit = 2
    else
      limit = tokenize[2].to_i rescue 0
    end
    limit == 0 ? nil : limit
  end


  def nullable
    not_index = tokenize.index('NOT')
    not_index && tokenize[not_index + 1] == 'NULL' ? 'false' : 'true'
  end

  def create_table_output
    if tokenize[0].nil?
      "end"
    elsif is_create_table?
      "\ncreate_table :#{rails_table_name} do |t|"
    elsif !rails_column_name.empty?
      "t.#{rails_column_type} :#{rails_column_name},#{" :limit => #{limit}," if limit} :null => #{nullable}".indent(2)
    end
  end

end

IGNORE = ['(','-']

file = File.new(ARGV[0], "r")
while (line = file.gets)
  unless IGNORE.include?(line.first(1)) || line.chomp('').empty?
    puts Line.new(line).create_table_output 
  end
end
file.close
